# docker-compose.yml

services:

  tenant_db:
    image: postgres:15
    shm_size: '1gb'
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 5s
      timeout: 60s
      retries: 20
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_PORT: 5432

  pg_bouncer:
    image: bitnami/pgbouncer:latest
    ports:
      - 6453:6432
    environment:
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_HOST: tenant_db
      POSTGRESQL_PASSWORD: postgres
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_IGNORE_STARTUP_PARAMETERS: "extra_float_digits, options"
      PGBOUNCER_STATS_USERS: postgres

  rustfs:
    image: rustfs/rustfs:latest
    ports:
      - '9000:9000'
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 5s
      timeout: 20s
      retries: 10
    environment:
      RUSTFS_ACCESS_KEY: supa-storage
      RUSTFS_SECRET_KEY: secret1234
    volumes:
      - rustfs_data:/data

  rustfs_setup:
    image: minio/mc
    depends_on:
      rustfs:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set rustfs http://rustfs:9000 supa-storage secret1234;
      /usr/bin/mc mb rustfs/mybucket;
      /usr/bin/mc ls rustfs;
      exit 0;
      "

  imgproxy:
    image: darthsim/imgproxy
    ports:
      - '50020:8080'
    volumes:
      - ./data:/images/data
    environment:
      - IMGPROXY_WRITE_TIMEOUT=20
      - IMGPROXY_READ_TIMEOUT=20
      - IMGPROXY_REQUESTS_QUEUE_SIZE=24
      - IMGPROXY_LOCAL_FILESYSTEM_ROOT=/images
      - IMGPROXY_USE_ETAG=true
      - IMGPROXY_ENABLE_WEBP_DETECTION=true

# Optional for rate-limiting
#  redis:
#    image: redis:6.2-alpine
#    restart: always
#    ports:
#      - '6379:6379'

# Optional for tracing
#  otel:
#    extends:
#      service: otel-collector
#      file: ./.docker/docker-compose-monitoring.yml
#
#  jaeger:
#    extends:
#      service: jaeger
#      file: ./.docker/docker-compose-monitoring.yml

configs:
  init.sql:
    content: |
      CREATE SCHEMA IF NOT EXISTS _supavisor;

volumes:
  rustfs_data: